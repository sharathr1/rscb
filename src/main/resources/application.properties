server.port=9090

#spring.datasource.driverClassName=org.postgresql.Driver
#spring.datasource.url= jdbc:postgresql://localhost:5432/postgres 
#spring.datasource.username=postgres
#spring.datasource.password=admin
#
spring.datasource.driverClassName=org.postgresql.Driver
spring.datasource.url= jdbc:postgresql://10.42.185.168:5432/gehc_data
spring.datasource.username=502635716
spring.datasource.password=lg635716

#spring.hive.datasource.driverClassName=org.apache.hive.jdbc.HiveDriver
#spring.hive.datasource.url=jdbc:hive2://3.209.124.206:10000/digital_twin
#spring.hive.datasource.username=digital_twin
#spring.hive.datasource.password=

# Show or not log for each sql query
spring.jpa.show-sql = true
#
# Naming strategy
#
#spring.jpa.hibernate.naming-strategy = org.hibernate.cfg.ImprovedNamingStrategy

# Allows Hibernate to generate SQL optimized for a particular DBMS
spring.jpa.hibernate.ddl-auto = validate
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.PostgreSQLDialect
#spring.jpa.database = POSTGRESQL

# Disable feature detection by this undocumented parameter. Check the org.hibernate.engine.jdbc.internal.JdbcServiceImpl.configure method for more details.
spring.jpa.properties.hibernate.temp.use_jdbc_metadata_defaults = false

# Because detection is disabled you have to set correct dialect by hand.
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQL9Dialect

server.compression.mime-types=application/json,application/xml,text/html,text/xml,text/plain,application/javascript,text/css,image/svg+xml,image/x-icon,image/png,image/*
server.compression.enabled=true
logging.level.org.springframework.web.filter.CommonsRequestLoggingFilter=DEBUG


# SECURITY (SecurityProperties)
#spring.security.filter.order=-100
 # Security filter chain order.
#spring.security.filter.dispatcher-types=async,error,request # Security filter chain dispatcher types.
#spring.security.user.name=user
 # Default user name.
#spring.security.user.password=password
 # Password for the default user name.
#spring.security.user.roles= admin
# Granted roles for the default user name

datafabric_dea.modality.service=select * from modality_cust where :FILTER 

searchByComponentsdesc=SELECT *  FROM ( select * ,  ts_rank(to_tsvector(a.componentsdesc), plainto_tsquery(?)) as relevancy  from  datafabric_dea.system_component a order by relevancy desc ) as innerTable where relevancy > 0.0001
searchByComponentsdesc2=SELECT *  FROM ( select * ,  ts_rank(to_tsvector(a.componentsdesc), plainto_tsquery(?)) as relevancy  from  datafabric_dea.system_component a order by relevancy desc ) as innerTable where relevancy > 0.0001
searchByComponentsdescExpr=SELECT   *  FROM ( select * ,  ts_rank(to_tsvector(a.product ||' '|| a.contract_name),to_tsquery(?) ) as relevancy  from  datafabric_dea.region_contract a   order by relevancy desc ) as innerTable where relevancy > 0.0001
searchByUniqueCompDesc=SELECT *  FROM ( select distinct(a.componentsdesc) ,  ts_rank(to_tsvector(a.componentsdesc), plainto_tsquery(?)) as relevancy  from  datafabric_dea.system_component a order by relevancy desc ) as innerTable where relevancy > 0.0001
searchInRegionContractExpr=SELECT   *  FROM ( select  id, region, product, contract_name as contractOfferingName ,  ts_rank(to_tsvector(a.product ||' '|| a.contract_name ||' '||a.region),plainto_tsquery(?) ) as relevancy  from  datafabric_dea.region_contract a   order by relevancy desc ) as innerTable where relevancy > 0.0001
searchByUniqueRCProduct=SELECT   *  FROM ( select  distinct(product) ,  ts_rank(to_tsvector(a.product),plainto_tsquery(?) ) as relevancy  from  datafabric_dea.region_contract a   order by relevancy desc ) as innerTable where relevancy > 0.0001

searchByCustName=SELECT *  FROM ( select   customer_name ,  ib_count, id ,  ts_rank(to_tsvector(a.customer_name),plainto_tsquery(?) ) as relevancy  from  datafabric_dea.customer_ib a   order by relevancy desc ) as innerTable where relevancy > 0.0001